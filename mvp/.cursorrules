# 原有规则
# 原有规则
# “诗鉴”（Poetry Insight）AI驱动诗词赏析平台 - MVP版本项目设计文档（讯飞星火适配版）
## 文档信息
- **文档版本**：v1.0-MVP（讯飞星火版）
- **创建日期**：2025-10-14
- **文档类型**：MVP版本项目设计文档
- **编写视角**：项目技术负责人/项目经理视角
- **目标读者**：项目团队（Python后端、Uniapp前端）、测试人员
- **核心定位**：聚焦“诗词分类别搜索+AI诗词分析”两大核心功能，采用TXT文本存储诗词资源，基于Uniapp+Python技术栈，将AI接口替换为**讯飞星火大模型**，实现最小可行产品，验证核心功能链路与讯飞星火API适配稳定性


## 项目概述（MVP版本）
### 项目愿景（精简聚焦）
构建轻量化跨端诗词工具，围绕“按类别找诗词、AI解诗词”核心需求，基于Uniapp适配微信小程序+H5，通过Python后端打通“分类别搜索TXT诗词资源-调用讯飞星火生成分析内容”链路，为用户提供“选诗词类别→找目标诗词→看讯飞星火AI分析”的闭环服务，同时验证TXT文本存储诗词的实用性与讯飞星火API的调用稳定性。

### 核心价值主张（落地核心）
1. **分类别诗词搜索**：按“朝代（唐/宋/元/明/清）”“题材（边塞/田园/送别/咏物）”分类，从本地TXT文本中快速定位诗词，解决“按类别找诗难”问题，无需依赖网络资源。
2. **讯飞星火AI诗词分析**：调用讯飞星火大模型（优先选择“星火认知大模型3.0 Lite”，兼顾成本与效果）生成结构化分析（创作背景、意象解读、情感表达），覆盖用户“读懂诗词内涵”需求，替代传统静态解读文本，适配教育场景下的通俗化解读需求。
3. **TXT轻量存储**：诗词以TXT文本格式存储（含原文、作者、朝代、基础注释），降低数据存储复杂度，便于快速读取与后续更新维护。


## 系统架构设计（MVP精简版 - Uniapp+Python+讯飞星火+TXT存储）
以“聚焦核心、简化模块、适配讯飞星火”为原则，前端实现分类搜索与AI分析交互，后端处理TXT读取与讯飞星火API调用，数据层仅保留TXT诗词存储与核心记录，确保链路通顺。

### 整体架构图（核心层级）
| 层级                | 核心组件与技术栈                                                                 | 核心功能（仅保留两大核心，适配讯飞星火）                                                                 |
|---------------------|----------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|
| **Uniapp前端层**    | Vue3（页面开发）、Pinia（状态管理）、uView Plus（UI组件）、uni.request（请求）    | 分类搜索界面（类别选择、诗词列表）、AI分析界面（讯飞星火结果展示、历史记录）、本地缓存（搜索/分析记录）     |
| **Python后端层**    | FastAPI（接口开发）、讯飞星火Python SDK（API调用）、Pydantic（数据校验）、TXT文件读写模块 | 读取TXT诗词资源、处理分类搜索请求、封装讯飞星火API参数（Prompt模板）、调用讯飞星火生成分析内容、返回结构化数据 |
| **数据存储层**      | 本地TXT文本（诗词库）、Supabase（仅存搜索/分析记录）、Redis（高频诗词缓存）       | TXT存储诗词（按“朝代-题材”分文件，如`唐-边塞诗.txt`）、记录用户操作数据、缓存热门诗词及讯飞星火分析结果     |
| **外部服务层**      | 讯飞星火大模型API（星火认知大模型3.0 Lite）                                        | 生成诗词结构化分析内容，支持通俗化、教育场景化解读                                                           |

### 技术架构特点（适配讯飞星火与核心需求）
1. **TXT存储优化**：诗词按“朝代-题材”拆分TXT文件（例：`宋-田园诗.txt`），每行存储单首诗词信息（格式：标题|作者|朝代|原文|基础注释），便于后端快速读取与分类筛选，减少对数据库的依赖。
2. **Uniapp轻量化**：仅开发3个核心页面（分类搜索页、诗词详情页、AI分析页），避免复杂交互，优先保证分类选择、TXT诗词加载、讯飞星火分析展示的流畅性，页面加载时间目标<800ms。
3. **讯飞星火API适配**：
   - 后端集成讯飞星火Python SDK（需在讯飞开放平台申请API Key与Secret Key），封装统一的AI调用函数，支持参数配置（如“temperature=0.3”，确保分析内容准确性）；
   - 针对讯飞星火API的“请求频率限制”（免费版通常为10次/分钟），在后端添加请求队列与重试机制，避免并发调用失败。
4. **成本控制**：选择讯飞星火“3.0 Lite”版本（按调用次数计费，成本低于旗舰版），同时通过Redis缓存高频诗词的AI分析结果（有效期24小时），减少重复调用，降低API费用。


## 核心功能模块设计（仅保留两大核心，适配讯飞星火）
### 1. 诗词分类别搜索模块（核心）
#### 功能描述
支持用户按“朝代”“题材”双维度分类，从本地TXT文本中筛选诗词，展示结果并提供详情查看入口，流程与原设计一致，无额外调整。
#### 核心功能点
- **双维度分类选择**：
  - 朝代分类：提供“唐、宋、元、明、清”选项，用户可单选（如仅选“唐”）；
  - 题材分类：对应朝代展示可选题材（如“唐”对应“边塞、田园、送别”），用户可进一步筛选；
- **TXT诗词读取**：后端根据用户选择的“朝代-题材”，读取对应TXT文件（如选“唐-边塞”则读`唐-边塞诗.txt`），筛选诗词数据；
- **搜索结果展示**：前端以列表展示诗词（含标题、作者），点击列表项进入详情页，查看原文、基础注释（从TXT中读取）；
- **历史记录**：自动保存用户近5条分类搜索记录（如“唐-边塞诗”“宋-田园诗”），支持一键重新搜索。

#### 技术实现
- 前端：通过下拉选择器实现“朝代-题材”联动选择，点击“搜索”后用`uni.request`将分类参数（如`dynasty=唐&subject=边塞`）发送至Python后端；
- 后端：接收参数后，通过Python的`open()`函数读取对应TXT文件，按“|”分割每行数据（标题|作者|朝代|原文|注释），筛选出符合条件的诗词，格式化后返回前端；
- 缓存：Redis缓存高频访问的“朝代-题材”TXT数据（如“唐-边塞诗”），有效期12小时，减少重复读取TXT的耗时。


### 2. 讯飞星火AI诗词分析模块（核心，替换原AI接口）
#### 功能描述
用户在诗词详情页触发分析请求，后端调用**讯飞星火大模型API**生成结构化分析内容，返回前端展示并保存记录，核心流程适配讯飞星火的API特性。
#### 核心功能点
- **一键触发分析**：详情页提供“生成AI分析（讯飞星火）”按钮，点击后显示加载状态（如“讯飞星火正在分析，请稍等”），若触发API频率限制，提示“当前请求较多，请1分钟后重试”；
- **结构化分析内容（讯飞星火生成）**：基于讯飞星火的教育场景适配能力，生成3个固定模块，语言通俗（300字内），符合诗词学习需求：
  - 创作背景：结合历史语境，简化复杂史实（如“《出塞》创作于盛唐，当时唐朝与匈奴频繁交战，诗人王昌龄借诗表达对和平的渴望”）；
  - 意象解读：用直白语言解释核心意象（如“‘明月’在《静夜思》中不是简单的月亮，而是诗人对故乡的思念寄托”）；
  - 情感表达：提炼诗词核心情感，避免抽象表述（如“这首诗没有直接说‘想回家’，但通过‘举头’‘低头’的动作，让读者感受到诗人的思乡之情”）；
- **分析记录保存**：自动保存用户的分析记录（含诗词标题、作者、讯飞星火分析内容、生成时间），支持在“我的分析”页面查看历史记录；
- **异常处理**：
  - 讯飞星火API调用超时（默认超时时间5秒）：提示“分析超时，请检查网络后重试”；
  - API密钥失效：后端记录错误日志，前端提示“服务暂不可用，请稍后尝试”；
  - 内容审核不通过（讯飞星火自带内容过滤）：提示“当前诗词分析请求未通过审核，请换一首诗词尝试”。

#### 技术实现（关键适配讯飞星火）
1. **讯飞星火API准备**：
   - 在[讯飞开放平台](https://www.xfyun.cn/)注册账号，创建“诗词赏析”应用，申请“星火认知大模型3.0 Lite”API权限，获取`api_key`与`api_secret`；
   - 安装讯飞星火Python SDK：`pip install xfyun-spark-api`。

2. **后端API封装（核心代码片段，带注释）**：
   ```python
   from fastapi import APIRouter, HTTPException
   from pydantic import BaseModel
   from xfyun_spark.api import SparkAPI  # 导入讯飞星火SDK
   import redis
   from datetime import timedelta

   # 初始化讯飞星火客户端
   spark = SparkAPI(
       api_key="你的讯飞api_key",
       api_secret="你的讯飞api_secret",
       model="spark-lite-3.0"  # 选择轻量版模型，平衡成本与效果
   )

   # 初始化Redis缓存（用于缓存高频诗词分析结果）
   redis_client = redis.Redis(host="localhost", port=6379, db=0)

   # 定义请求体结构
   class AIAnalysisRequest(BaseModel):
       poem_title: str  # 诗词标题
       poem_author: str  # 诗词作者
       poem_content: str  # 诗词原文

   # 创建路由
   ai_router = APIRouter(prefix="/api/ai")

   @ai_router.post("/analysis")
   async def get_ai_analysis(req: AIAnalysisRequest):
       # 1. 先查Redis缓存，若存在则直接返回（避免重复调用讯飞API）
       cache_key = f"poem_analysis:{req.poem_title}_{req.poem_author}"
       cached_analysis = redis_client.get(cache_key)
       if cached_analysis:
           return {"code": 200, "data": {"analysis": cached_analysis.decode("utf-8")}}

       # 2. 构建讯飞星火Prompt（适配教育场景，强调通俗化）
       prompt = f"""
       请你以中学生能理解的语言，分析以下诗词：
       标题：{req.poem_title}
       作者：{req.poem_author}
       原文：{req.poem_content}
       分析需包含3个部分，每部分不超过100字：
       1. 创作背景：简单说明作者写这首诗时的情况或当时的历史背景；
       2. 意象解读：解释诗中关键事物（如月亮、山水）的含义；
       3. 情感表达：说明这首诗传递了作者什么感情。
       不要用复杂术语，语言要口语化。
       """

       try:
           # 3. 调用讯飞星火API
           response = spark.chat.completions.create(
               messages=[{"role": "user", "content": prompt}],
               temperature=0.3,  # 降低随机性，确保分析内容稳定
               max_tokens=300    # 限制生成字数，控制成本
           )

           # 4. 提取讯飞星火返回的分析内容
           analysis_content = response.choices[0].message.content.strip()

           # 5. 存入Redis缓存，有效期24小时
           redis_client.setex(cache_key, timedelta(hours=24), analysis_content)

           # 6. 返回结果
           return {"code": 200, "data": {"analysis": analysis_content}}

       except Exception as e:
           # 捕获讯飞API调用异常（如频率限制、密钥错误）
           error_msg = str(e)
           if "rate limit" in error_msg.lower():
               raise HTTPException(status_code=429, detail="当前请求较多，请1分钟后重试")
           elif "invalid api key" in error_msg.lower():
               raise HTTPException(status_code=500, detail="服务配置错误，请联系管理员")
           else:
               raise HTTPException(status_code=500, detail=f"分析生成失败：{error_msg}")
   ```

3. **前端调用适配**：
   - 前端触发分析时，将诗词的“标题、作者、原文”（从TXT读取的详情数据）通过`uni.request`发送至后端`/api/ai/analysis`接口；
   - 处理返回结果：若`code=200`，则展示分析内容；若`statusCode=429`，则显示频率限制提示；若`statusCode=500`，则显示服务错误提示。

4. **记录存储**：
   - 后端将讯飞星火生成的分析内容存入Supabase的`ai_analysis_records`表，关联用户ID；
   - 前端“我的分析”页面从该表读取历史记录，按生成时间倒序展示。


## 数据设计（聚焦TXT存储与核心记录，适配讯飞星火）
### 1. TXT诗词文件设计（核心存储，无调整）
#### 文件命名规则
按“朝代-题材.txt”命名，例：`唐-边塞诗.txt`、`宋-田园诗.txt`、`明-咏物诗.txt`。
#### TXT内容格式（每行一首诗词）
```
标题|作者|朝代|原文|基础注释
静夜思|李白|唐|床前明月光，疑是地上霜。举头望明月，低头思故乡。|霜：这里指月光像霜一样洁白；举头：抬头
出塞|王昌龄|唐|秦时明月汉时关，万里长征人未还。但使龙城飞将在，不教胡马度阴山。|但使：只要；龙城飞将：指汉朝名将李广，这里泛指英勇善战的将领
```
#### TXT维护说明
- 新增诗词：直接在对应“朝代-题材”TXT文件末尾追加一行，按格式填写；
- 修改诗词：找到对应行，修改内容（如修正注释错误）；
- 删除诗词：删除对应行，保存文件即可。

### 2. 核心记录表结构（Supabase，仅存必要数据，适配讯飞星火）
| 表名                | 核心字段                                                                 | 用途说明（适配讯飞星火分析记录）                                                                 |
|---------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------|
| `user_search_history` | id（主键）、user_id（用户标识）、dynasty（搜索朝代）、subject（搜索题材）、search_time（搜索时间） | 记录用户分类搜索历史，支持重新搜索                                                                  |
| `ai_analysis_records` | id（主键）、user_id（用户标识）、poem_title（诗词标题）、poem_author（作者）、analysis_content（讯飞星火分析内容）、create_time（生成时间）、ai_model（AI模型标识，固定为“spark-lite-3.0”） | 存储用户讯飞星火AI分析记录，支持历史查看，便于后续追溯模型版本                                        |


## 项目进度与里程碑（MVP精简版，新增讯飞星火适配环节）
| 阶段                | 时间周期（周） | 核心任务（围绕两大功能+讯飞星火适配）                                                                 | 交付物                                                                 |
|---------------------|----------------|------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
| **需求与设计**      | 1              | 确认分类维度（朝代/题材）、设计TXT格式、绘制3个核心页面原型、编写讯飞星火Prompt模板、申请讯飞API密钥 | 分类维度清单、TXT格式规范、UI原型图、讯飞星火Prompt模板、讯飞API密钥      |
| **TXT诗词整理**     | 1              | 按“朝代-题材”整理诗词，写入TXT文件（每个分类至少10首）、验证TXT读取稳定性                              | 全套TXT诗词文件（如`唐-边塞诗.txt`等）、TXT读取测试报告                  |
| **讯飞星火API适配** | 1              | 后端集成讯飞星火SDK、封装AI调用函数、测试API调用稳定性（含频率限制、异常处理）、配置Redis缓存         | 讯飞星火调用测试报告、Redis缓存配置文档、AI接口封装代码                  |
| **Uniapp前端开发**  | 2              | 开发分类搜索页（朝代/题材选择）、诗词详情页（TXT内容展示）、AI分析页（讯飞星火结果展示/历史记录）、处理API异常提示 | 前端代码（微信小程序+H5版本）、前端功能测试报告                          |
| **Python后端开发**  | 1              | 开发TXT读取接口、分类搜索接口、集成讯飞星火AI分析接口、配置Supabase记录存储                          | 后端代码（FastAPI项目）、接口文档（含讯飞星火API参数说明）、API测试报告（Postman） |
| **联调与上线**      | 1              | 前后端联调（分类搜索→TXT读取→讯飞星火分析→记录保存）、兼容性测试、微信小程序审核、H5部署              | 可运行产品（小程序+H5）、联调报告、上线链接、讯飞API调用成本测算表        |


## 成功指标与评估（MVP精简版，新增讯飞星火相关指标）
### 技术指标
- **分类搜索响应时间**：≤1秒（从用户选择分类到展示诗词列表）；
- **讯飞星火AI分析生成时间**：≤3秒（从点击生成到展示分析内容，含缓存命中场景）；
- **讯飞星火API调用成功率**：≥98%（排除频率限制与密钥错误场景）；
- **TXT读取成功率**：100%（无格式错误导致的诗词读取失败）；
- **系统可用性**：≥99.5%（支持每日500+用户访问）。

### 业务指标
- **分类搜索使用率**：100%（所有用户均使用分类功能找诗词）；
- **讯飞星火AI分析转化率**：≥70%（使用分类搜索后，触发AI分析的用户占比）；
- **讯飞星火分析满意度**：通过简单问卷（新增“AI分析是否易懂”问题），目标平均满意度≥4分（5分制）；
- **API成本控制**：日均讯飞星火API调用费用≤50元（按“3.0 Lite”0.01元/次测算，日均调用≤5000次）。


## 总结（MVP精简版，讯飞星火适配版）
“诗鉴”MVP版本聚焦“分类别搜索+讯飞星火AI分析”核心，以TXT轻量存储诗词，通过Uniapp+Python实现跨端服务。关键适配讯飞星火大模型的轻量版API，兼顾分析准确性与成本控制，同时通过缓存机制减少重复调用。不追求功能全面，仅通过核心链路验证“分类找诗-讯飞星火解诗”的用户价值、TXT存储的可行性及讯飞星火API的稳定性，后续可基于此扩展更多分类、增加TXT诗词量或升级讯飞星火模型版本（如“3.0 Pro”），提升分析深度。。

# 新增规则
    # Role
    你是一名精通Python的高级工程师，拥有20年的软件开发经验。你的任务是帮助一位不太懂技术的初中生用户完成Python项目的开发。你的工作对用户来说非常重要，完成后将获得10000美元奖励。

    # Goal
    你的目标是以用户容易理解的方式帮助他们完成Python项目的设计和开发工作。你应该主动完成所有工作，而不是等待用户多次推动你。

    在理解用户需求、编写代码和解决问题时，你应始终遵循以下原则：

    ## 第一步：项目初始化
    - 当用户提出任何需求时，首先浏览项目根目录下的README.md文件和所有代码文档，理解项目目标、架构和实现方式。
    - 如果还没有README文件，创建一个。这个文件将作为项目功能的说明书和你对项目内容的规划。
    - 在README.md中清晰描述所有功能的用途、使用方法、参数说明和返回值说明，确保用户可以轻松理解和使用这些功能。

    ## 第二步：需求分析和开发
    ### 理解用户需求时：
    - 充分理解用户需求，站在用户角度思考。
    - 作为产品经理，分析需求是否存在缺漏，与用户讨论并完善需求。
    - 选择最简单的解决方案来满足用户需求。

    ### 编写代码时：
    - 遵循PEP 8 Python代码风格指南。
    - 使用最新的Python 3语法特性和最佳实践。
    - 合理使用面向对象编程(OOP)和函数式编程范式。
    - 利用Python的标准库和生态系统中的优质第三方库。
    - 实现模块化设计，确保代码的可重用性和可维护性。
    - 使用类型提示(Type Hints)进行类型检查，提高代码质量。
    - 编写详细的文档字符串(docstring)和注释。
    - 实现适当的错误处理和日志记录。
    - 编写单元测试确保代码质量。

    ### 解决问题时：
    - 全面阅读相关代码文件，理解所有代码的功能和逻辑。
    - 分析导致错误的原因，提出解决问题的思路。
    - 与用户进行多次交互，根据反馈调整解决方案。

    ## 第三步：项目总结和优化
    - 完成任务后，反思完成步骤，思考项目可能存在的问题和改进方式。
    - 更新README.md文件，包括新增功能说明和优化建议。
    - 考虑使用Python的高级特性，如异步编程、并发处理等来优化性能。
    - 优化代码性能，包括算法复杂度、内存使用和执行效率。

    在整个过程中，始终参考[Python官方文档](https://docs.python.org/)，确保使用最新的Python开发最佳实践。